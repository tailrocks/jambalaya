/*
 * Copyright 2021 original authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.jambalaya.example.jooq.tables;

import com.jambalaya.example.jooq.DefaultSchema;
import com.jambalaya.example.jooq.Keys;
import com.jambalaya.example.jooq.enums.PaymentMethodCardBrand;
import com.jambalaya.example.jooq.tables.records.PaymentMethodRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jspecify.annotations.NonNull;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class PaymentMethod extends TableImpl<PaymentMethodRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>payment_method</code>
     */
    public static final PaymentMethod PAYMENT_METHOD = new PaymentMethod();

    /**
     * The class holding records for this type
     */
    @Override
    @NonNull
    public Class<PaymentMethodRecord> getRecordType() {
        return PaymentMethodRecord.class;
    }

    /**
     * The column <code>payment_method.id</code>.
     */
    public final TableField<PaymentMethodRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>payment_method.created_date</code>.
     */
    public final TableField<PaymentMethodRecord, LocalDateTime> CREATED_DATE = createField(DSL.name("created_date"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>payment_method.last_modified_date</code>.
     */
    public final TableField<PaymentMethodRecord, LocalDateTime> LAST_MODIFIED_DATE = createField(DSL.name("last_modified_date"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>payment_method.version</code>.
     */
    public final TableField<PaymentMethodRecord, Long> VERSION = createField(DSL.name("version"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field("0", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>payment_method.stripe_payment_method_id</code>.
     */
    public final TableField<PaymentMethodRecord, String> STRIPE_PAYMENT_METHOD_ID = createField(DSL.name("stripe_payment_method_id"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>payment_method.card_brand</code>.
     */
    public final TableField<PaymentMethodRecord, PaymentMethodCardBrand> CARD_BRAND = createField(DSL.name("card_brand"), SQLDataType.VARCHAR.asEnumDataType(PaymentMethodCardBrand.class), this, "");

    /**
     * The column <code>payment_method.card_expiration_date</code>.
     */
    public final TableField<PaymentMethodRecord, LocalDate> CARD_EXPIRATION_DATE = createField(DSL.name("card_expiration_date"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>payment_method.card_number</code>.
     */
    public final TableField<PaymentMethodRecord, String> CARD_NUMBER = createField(DSL.name("card_number"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>payment_method.card_holder_name</code>.
     */
    public final TableField<PaymentMethodRecord, String> CARD_HOLDER_NAME = createField(DSL.name("card_holder_name"), SQLDataType.VARCHAR(255), this, "");

    private PaymentMethod(Name alias, Table<PaymentMethodRecord> aliased) {
        this(alias, aliased, null);
    }

    private PaymentMethod(Name alias, Table<PaymentMethodRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>payment_method</code> table reference
     */
    public PaymentMethod(String alias) {
        this(DSL.name(alias), PAYMENT_METHOD);
    }

    /**
     * Create an aliased <code>payment_method</code> table reference
     */
    public PaymentMethod(Name alias) {
        this(alias, PAYMENT_METHOD);
    }

    /**
     * Create a <code>payment_method</code> table reference
     */
    public PaymentMethod() {
        this(DSL.name("payment_method"), null);
    }

    public <O extends Record> PaymentMethod(Table<O> child, ForeignKey<O, PaymentMethodRecord> key) {
        super(child, key, PAYMENT_METHOD);
    }

    @Override
    @NonNull
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    @NonNull
    public Identity<PaymentMethodRecord, Long> getIdentity() {
        return (Identity<PaymentMethodRecord, Long>) super.getIdentity();
    }

    @Override
    @NonNull
    public UniqueKey<PaymentMethodRecord> getPrimaryKey() {
        return Keys.PAYMENT_METHOD_PKEY;
    }

    @Override
    @NonNull
    public List<UniqueKey<PaymentMethodRecord>> getKeys() {
        return Arrays.<UniqueKey<PaymentMethodRecord>>asList(Keys.PAYMENT_METHOD_PKEY);
    }

    @Override
    @NonNull
    public TableField<PaymentMethodRecord, Long> getRecordVersion() {
        return VERSION;
    }

    @Override
    @NonNull
    public PaymentMethod as(String alias) {
        return new PaymentMethod(DSL.name(alias), this);
    }

    @Override
    @NonNull
    public PaymentMethod as(Name alias) {
        return new PaymentMethod(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    @NonNull
    public PaymentMethod rename(String name) {
        return new PaymentMethod(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @NonNull
    public PaymentMethod rename(Name name) {
        return new PaymentMethod(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    @NonNull
    public Row9<Long, LocalDateTime, LocalDateTime, Long, String, PaymentMethodCardBrand, LocalDate, String, String> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
